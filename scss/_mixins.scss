//Percent
@function percent($px, $from) {
    $result: math.div($px, $from) * 100%;
    @return $result;
}
//REM
@function rem($px) {
    $result: math.div($px, 16) + rem;
    @return $result;
}
//EM
@function em($px, $current: 16) {
    $result: math.div($px, $current) + em;
    @return $result;
}
//Адаптивное свойство
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
    @if ($startSize==0) {
        $startSize: 0.000001;
    }
    @if ($minSize==0) {
        $minSize: 0.000001;
    }

    // Для calc();
    $addSize: math.div($startSize - $minSize, 16);

    @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
        $widthFrom: $maxWidth;
    }

    // Брейк-поинты в EM
    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);

    // Формула плавающего значения
    $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope + $minSize;
    @if ($yIntersection==0) {
        $yIntersection: 0.000001;
    }
    $flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

    // Получение значения свойства
    $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
    // Если отрицательные значения
    @if ($minSize > $startSize) {
        $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
    }

    // Если поддерживается clamp();
    @supports (#{$property}: $propertyValue) {
        #{$property}: $propertyValue;
    }
    // Если не поддерживается clamp();
    @supports not (#{$property}: $propertyValue) {
        #{$property}: calc(
            #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) -
                math.div($widthTo, 16)}
        );
    }

    // Устанавливаем значения по умолчанию
    @if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
        @media (min-width: $widthFromMedia) {
            #{$property}: inherit;
        }
    }
    @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
        @media (max-width: $widthToMedia) {
            #{$property}: inherit;
        }
    }
}
@mixin burger {
    --burger-width: 30px;
    --burger-height: 20px;
    --burger-line-height: 2px;
    --burger-color: #fff;

    position: relative;
    border: none;
    padding: 0;
    width: var(--burger-width);
    height: var(--burger-height);
    color: var(--burger-color);
    background-color: transparent;
    cursor: pointer;

    &::before,
    &::after {
        content: "";
        position: absolute;
        left: 0;
        width: 100%;
        height: var(--burger-line-height);
        background-color: currentColor;
        transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
    }

    &::before {
        top: 0;
    }

    &::after {
        top: calc(100% - var(--burger-line-height));
    }

    &__line {
        position: absolute;
        left: 0;
        top: 50%;
        width: 100%;
        height: var(--burger-line-height);
        background-color: currentColor;
        transform: translateY(-50%);
        transition: transform 0.3s ease-in-out;
    }

    &--active {
        &::before {
            top: 50%;
            transform: rotate(45deg);
            transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
        }

        &::after {
            top: 50%;
            transform: rotate(-45deg);
            transition: transform 0.3s ease-in-out, top 0.3s ease-in-out;
        }

        .burger__line {
            transform: scale(0);
            transition: transform 0.3s ease-in-out;
        }
    }
}
